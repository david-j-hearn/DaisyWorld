/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * daisyWorldWindow.java
 *
 * Created on Nov 16, 2009, 8:32:15 PM
 */
package daisyWorld;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Toolkit;
import java.awt.Transparency;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.Iterator;
import java.util.Random;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.imageio.ImageWriter;
import javax.imageio.stream.ImageOutputStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingWorker;

//import java.beans.PropertyChangeEvent;
//import java.beans.PropertyChangeListener;
/**
 *
 * @author David
 */
public class daisyWorldWindow extends javax.swing.JFrame {
    //public class daisyWorldWindow extends javax.swing.JFrame implements PropertyChangeListener {

// <editor-fold defaultstate="collapsed" desc="variables">
    String curGraph = new String();
    public static final int INIT_SINGLE = 0;
    public static final int INIT_DENSE = 1;
    public static final int INIT_SPARSE = 2;
    double sparsity = 0.1;
    boolean running = false;
    boolean stop = false;
    boolean step = false;
    int temperaturePalette = 4;
    int populationPalette = 1;
    int w, h;
    double mutationRate = 0.1;
    double intensity = 1.0;
    double heatCapacity = 1.0;
    double heatDiffusion = 0.01;
    double aveT = 60;
    double aveP = 1.0;
    double aveA = 0;
    int maxP = 0;
    double optimalTemp = aveT;
    double maxTemp = intensity * optimalTemp;
    double reproduce = 0.1;
    double deathRate = 0.05;
    double deathConstant = 0.1;
    int cells = 50;
    int numberSpecies = 30;
    double dmutationRate = 0.1;
    double dintensity = 1.0;
    double dheatCapacity = 1.0;
    double daveT = 60;
    double doptimalTemp = aveT;
    double dmaxTemp = intensity * optimalTemp;
    double dreproduce = 0.1;
    double ddeathRate = 0.05;
    double ddeathConstant = 0.1;
    daisyWorldWindow dww = null;
    int dcells = 50;
    int dnumberSpecies = 30;
    int interval = 1;
    Vector times = new Vector();
    Vector temperature = new Vector();
    Vector diversity = new Vector();
    Vector totalPopulation = new Vector();
    Vector aveDeath = new Vector();
    Vector aveAge = new Vector();
    Vector[] species = new Vector[numberSpecies + 1];
    int[] speciesCnt = new int[numberSpecies + 1];
    Color[] speciesColors = new Color[numberSpecies + 1];
    double meanTemp = aveT;
    double time = 0;
    int[][] age = new int[cells][cells];
    int[][] populationStates = new int[cells][cells];
    double[][] temperatureStates = new double[cells][cells];
    int[][] temperatureColors = new int[cells][cells];
    Random r = new Random();
    private RunTask rtask = null;// </editor-fold>

    //javax.swing.JSlider solarIntensitySlider=null;
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        initializationChoices = new javax.swing.ButtonGroup();
        solarIntensityText = new javax.swing.JTextField();
        intensityLabel = new javax.swing.JLabel();
        heatCapacityLabel = new javax.swing.JLabel();
        heatCapacityText = new javax.swing.JTextField();
        mutationRateLabel = new javax.swing.JLabel();
        mutationRateText = new javax.swing.JTextField();
        cellDimensionText = new javax.swing.JTextField();
        cellsLabel = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        totalTimeText = new javax.swing.JTextField();
        aveTText = new javax.swing.JTextField();
        aveTLabel = new javax.swing.JLabel();
        graphType = new javax.swing.JComboBox();
        displayGraphLabel = new javax.swing.JLabel();
        runButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        populationPanel = new daisyWorld.CAPanel();
        temperaturePanel = new daisyWorld.CAPanel();
        graphPanel = new daisyWorld.graphPanel();
        deathRateLabel = new javax.swing.JLabel();
        deathRateText = new javax.swing.JTextField();
        reproductionRateLabel = new javax.swing.JLabel();
        reproductionRateText = new javax.swing.JTextField();
        deathRateSlider = new javax.swing.JSlider();
        reproductionRateSlider = new javax.swing.JSlider();
        mutationRateSlider = new javax.swing.JSlider();
        heatCapacitySlider = new javax.swing.JSlider();
        numberSpeciesLabel = new javax.swing.JLabel();
        numberSpeciesText = new javax.swing.JTextField();
        numberSpeciesSlider = new javax.swing.JSlider();
        solarIntensitySlider = new javax.swing.JSlider();
        stepButton = new javax.swing.JButton();
        menu = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveMenuItem = new javax.swing.JMenu();
        sPopulation = new javax.swing.JMenuItem();
        sTemperature = new javax.swing.JMenuItem();
        sGraph = new javax.swing.JMenuItem();
        quitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        populationPaletteMenu = new javax.swing.JMenu();
        pRainbow = new javax.swing.JMenuItem();
        pHeat = new javax.swing.JMenuItem();
        pTopo = new javax.swing.JMenuItem();
        pCM = new javax.swing.JMenuItem();
        pTerrain = new javax.swing.JMenuItem();
        temperaturePaletteMenu = new javax.swing.JMenu();
        tRainbow = new javax.swing.JMenuItem();
        tHeat = new javax.swing.JMenuItem();
        tTopo = new javax.swing.JMenuItem();
        tCM = new javax.swing.JMenuItem();
        tTerrain = new javax.swing.JMenuItem();
        runMenu = new javax.swing.JMenu();
        initializeMenu = new javax.swing.JMenu();
        initRandomDense = new javax.swing.JRadioButtonMenuItem();
        initRandomSparse = new javax.swing.JRadioButtonMenuItem();
        initSingle = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        solarIntensityText.setEditable(false);
        solarIntensityText.setText("2.1");

        intensityLabel.setText("solar intensity");

        heatCapacityLabel.setText("heat capacity");

        heatCapacityText.setEditable(false);
        heatCapacityText.setText("0.05");

        mutationRateLabel.setText("mutation rate");

        mutationRateText.setEditable(false);
        mutationRateText.setText("0.1");

        cellDimensionText.setText("100");

        cellsLabel.setText("cell dimension");

        timeLabel.setText("time passed");

        totalTimeText.setEditable(false);
        totalTimeText.setText("0");

        aveTText.setEditable(false);
        aveTText.setText("60");

        aveTLabel.setText("average temperature");

        graphType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Temperature", "Population Size", "Total Population", "Diversity", "Average Probability Death", "Average Individual Age", "None"}));
        graphType.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                graphTypeFocusGained(evt);
            }
        });

        displayGraphLabel.setText("select graph");

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        newButton.setText("New");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        populationPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout populationPanelLayout = new javax.swing.GroupLayout(populationPanel);
        populationPanel.setLayout(populationPanelLayout);
        populationPanelLayout.setHorizontalGroup(
            populationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 473, Short.MAX_VALUE)
        );
        populationPanelLayout.setVerticalGroup(
            populationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 236, Short.MAX_VALUE)
        );

        temperaturePanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout temperaturePanelLayout = new javax.swing.GroupLayout(temperaturePanel);
        temperaturePanel.setLayout(temperaturePanelLayout);
        temperaturePanelLayout.setHorizontalGroup(
            temperaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 473, Short.MAX_VALUE)
        );
        temperaturePanelLayout.setVerticalGroup(
            temperaturePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 236, Short.MAX_VALUE)
        );

        graphPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout graphPanelLayout = new javax.swing.GroupLayout(graphPanel);
        graphPanel.setLayout(graphPanelLayout);
        graphPanelLayout.setHorizontalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 952, Short.MAX_VALUE)
        );
        graphPanelLayout.setVerticalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 139, Short.MAX_VALUE)
        );

        deathRateLabel.setText("death rate");

        deathRateText.setEditable(false);
        deathRateText.setText("0.1");

        reproductionRateLabel.setText("reproduction rate");

        reproductionRateText.setEditable(false);
        reproductionRateText.setText("0.8");

        deathRateSlider.setMaximum(1000);
        deathRateSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                deathRateSliderStateChanged(evt);
            }
        });

        reproductionRateSlider.setMaximum(1000);
        reproductionRateSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                reproductionRateSliderStateChanged(evt);
            }
        });

        mutationRateSlider.setMaximum(1000);
        mutationRateSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mutationRateSliderStateChanged(evt);
            }
        });

        heatCapacitySlider.setMaximum(1000);
        heatCapacitySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                heatCapacitySliderStateChanged(evt);
            }
        });

        numberSpeciesLabel.setText("number species");

        numberSpeciesText.setEditable(false);
        numberSpeciesText.setText("30");

        numberSpeciesSlider.setMaximum(50);
        numberSpeciesSlider.setMinimum(1);
        numberSpeciesSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                numberSpeciesSliderStateChanged(evt);
            }
        });

        solarIntensitySlider.setMaximum(1000);
        solarIntensitySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                solarIntensitySliderStateChanged(evt);
            }
        });

        stepButton.setText("Step");
        stepButton.setEnabled(false);
        stepButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stepButtonActionPerformed(evt);
            }
        });

        fileMenu.setText("File");
        fileMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fileMenuMouseEntered(evt);
            }
        });

        saveMenuItem.setText("Save");

        sPopulation.setText("Population Panel...");
        sPopulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sPopulationActionPerformed(evt);
            }
        });
        saveMenuItem.add(sPopulation);

        sTemperature.setText("Temperature Panel...");
        sTemperature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sTemperatureActionPerformed(evt);
            }
        });
        saveMenuItem.add(sTemperature);

        sGraph.setText("Graph Panel...");
        sGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sGraphActionPerformed(evt);
            }
        });
        saveMenuItem.add(sGraph);

        fileMenu.add(saveMenuItem);

        quitMenuItem.setText("Quit");
        quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(quitMenuItem);

        menu.add(fileMenu);

        editMenu.setText("Edit");
        editMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                editMenuMouseEntered(evt);
            }
        });

        populationPaletteMenu.setText("Population Palette");

        pRainbow.setText("Rainbow");
        pRainbow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pRainbowActionPerformed(evt);
            }
        });
        populationPaletteMenu.add(pRainbow);

        pHeat.setText("Heat");
        pHeat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pHeatActionPerformed(evt);
            }
        });
        populationPaletteMenu.add(pHeat);

        pTopo.setText("Topo");
        pTopo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pTopoActionPerformed(evt);
            }
        });
        populationPaletteMenu.add(pTopo);

        pCM.setText("CM");
        pCM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pCMActionPerformed(evt);
            }
        });
        populationPaletteMenu.add(pCM);

        pTerrain.setText("Terrain");
        pTerrain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pTerrainActionPerformed(evt);
            }
        });
        populationPaletteMenu.add(pTerrain);

        editMenu.add(populationPaletteMenu);

        temperaturePaletteMenu.setText("Temperature Palette");

        tRainbow.setText("Rainbow");
        tRainbow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tRainbowActionPerformed(evt);
            }
        });
        temperaturePaletteMenu.add(tRainbow);

        tHeat.setText("Heat");
        tHeat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tHeatActionPerformed(evt);
            }
        });
        temperaturePaletteMenu.add(tHeat);

        tTopo.setText("Topo");
        tTopo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tTopoActionPerformed(evt);
            }
        });
        temperaturePaletteMenu.add(tTopo);

        tCM.setText("CM");
        tCM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tCMActionPerformed(evt);
            }
        });
        temperaturePaletteMenu.add(tCM);

        tTerrain.setText("Terrain");
        tTerrain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tTerrainActionPerformed(evt);
            }
        });
        temperaturePaletteMenu.add(tTerrain);

        editMenu.add(temperaturePaletteMenu);

        menu.add(editMenu);

        runMenu.setText("Run");
        runMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                runMenuMouseEntered(evt);
            }
        });

        initializeMenu.setText("Initialize");
        initializeMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initializeMenuActionPerformed(evt);
            }
        });

        initializationChoices.add(initRandomDense);
        initRandomDense.setSelected(true);
        initRandomDense.setText("Random (Dense)");
        initRandomDense.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initRandomDenseActionPerformed(evt);
            }
        });
        initializeMenu.add(initRandomDense);

        initializationChoices.add(initRandomSparse);
        initRandomSparse.setText("Random (Sparse)");
        initRandomSparse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initRandomSparseActionPerformed(evt);
            }
        });
        initializeMenu.add(initRandomSparse);

        initializationChoices.add(initSingle);
        initSingle.setText("Single Individual");
        initSingle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initSingleActionPerformed(evt);
            }
        });
        initializeMenu.add(initSingle);

        runMenu.add(initializeMenu);

        menu.add(runMenu);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(populationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(temperaturePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(intensityLabel)
                                    .addComponent(heatCapacityLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(heatCapacityText, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                                    .addComponent(solarIntensityText, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(solarIntensitySlider, 0, 0, Short.MAX_VALUE)
                                    .addComponent(heatCapacitySlider, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE))
                                .addGap(166, 166, 166))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(runButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(newButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(stopButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(resetButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(stepButton)
                                .addGap(92, 92, 92)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mutationRateLabel)
                            .addComponent(reproductionRateLabel)
                            .addComponent(deathRateLabel)
                            .addComponent(numberSpeciesLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(numberSpeciesText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deathRateText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(reproductionRateText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mutationRateText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(reproductionRateSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mutationRateSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deathRateSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numberSpeciesSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(73, 73, 73)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cellsLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cellDimensionText))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(displayGraphLabel)
                                .addGap(18, 18, 18)
                                .addComponent(graphType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(timeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalTimeText))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(aveTLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(aveTText, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(graphPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(10, 10, 10))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {deathRateSlider, mutationRateSlider, numberSpeciesSlider, reproductionRateSlider});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {deathRateText, mutationRateText, numberSpeciesText, reproductionRateText});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {heatCapacityText, solarIntensityText});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(populationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(temperaturePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(graphPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(intensityLabel)
                                .addComponent(solarIntensityText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(solarIntensitySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(heatCapacityLabel)
                                .addComponent(heatCapacityText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(heatCapacitySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(runButton)
                            .addComponent(newButton)
                            .addComponent(stopButton)
                            .addComponent(resetButton)
                            .addComponent(stepButton))
                        .addGap(3, 3, 3))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(graphType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(displayGraphLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(numberSpeciesText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(numberSpeciesLabel))
                                    .addComponent(numberSpeciesSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(deathRateSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(deathRateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(deathRateLabel))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(reproductionRateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(reproductionRateLabel))
                                    .addComponent(reproductionRateSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(mutationRateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(mutationRateLabel))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addComponent(mutationRateSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cellsLabel)
                                    .addComponent(cellDimensionText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(timeLabel)
                                    .addComponent(totalTimeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(aveTText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(aveTLabel))))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initVectors() {

        times = new Vector();
        temperature = new Vector();
        diversity = new Vector();
        totalPopulation = new Vector();
        aveDeath = new Vector();
        aveAge = new Vector();
    }

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        //step = false;
        stepButton.setEnabled(true);
        if (rtask != null) {
            rtask.cancel(true);
            System.out.println("rtast is canceled");
        } else {
            System.out.println("rtask is null");
        }
        int cellsOld = cells;
        int numberSpeciesOld = numberSpecies;
        initVariables();
        initVectors();
        if (cells != cellsOld || numberSpeciesOld != numberSpecies) {
            initPopulation();
            initTemperature();
        }
        initSpecies();
        rtask = new RunTask();
        rtask.execute();
    }//GEN-LAST:event_runButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        step = false;
        stepButton.setEnabled(false);
        if (rtask != null) {
            rtask.cancel(true);
        } else {
            System.out.println("rtask is null");
        }
        System.out.println("stop");
    }//GEN-LAST:event_stopButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        step = true;
        stepButton.setEnabled(true);
        if (rtask != null) {
            rtask.cancel(true);
            System.out.println("rtask is canceled");
        } else {
            System.out.println("rtask is null");
        }
        initVariables();
        initPopulation();
        initTemperature();
        initVectors();
        initSpecies();
        rtask = new RunTask();
        rtask.execute();
    }//GEN-LAST:event_newButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        step = false;
        stepButton.setEnabled(false);
        System.out.println("Resetting variables");
        meanTemp = daveT;
        initVectors();
        setDefaults();
        initVariables();
        initPopulation();
        initTemperature();
        initSpecies();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void heatCapacitySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_heatCapacitySliderStateChanged
        int value = heatCapacitySlider.getValue();
        double valued = (double) value / 1000;
        heatCapacityText.setText(Double.toString(valued));
        getVariableValues();
    }//GEN-LAST:event_heatCapacitySliderStateChanged

    private void deathRateSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_deathRateSliderStateChanged
        int value = deathRateSlider.getValue();
        double valued = (double) value / 1000;
        deathRateText.setText(Double.toString(valued));
        getVariableValues();
    }//GEN-LAST:event_deathRateSliderStateChanged

    private void numberSpeciesSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_numberSpeciesSliderStateChanged
        int value = numberSpeciesSlider.getValue();
        numberSpeciesText.setText(Integer.toString(value));
        getVariableValues();
    }//GEN-LAST:event_numberSpeciesSliderStateChanged

    private void reproductionRateSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_reproductionRateSliderStateChanged
        int value = reproductionRateSlider.getValue();
        double valued = (double) value / 1000;
        reproductionRateText.setText(Double.toString(valued));
        getVariableValues();
    }//GEN-LAST:event_reproductionRateSliderStateChanged

    private void mutationRateSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mutationRateSliderStateChanged
        int value = mutationRateSlider.getValue();
        double valued = (double) value / 1000;
        mutationRateText.setText(Double.toString(valued));
        getVariableValues();
    }//GEN-LAST:event_mutationRateSliderStateChanged

    private void solarIntensitySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_solarIntensitySliderStateChanged
        int value = solarIntensitySlider.getValue();
        double valued = (double) value / 100;
        solarIntensityText.setText(Double.toString(valued));
        getVariableValues();
    }//GEN-LAST:event_solarIntensitySliderStateChanged

    private void showMessage(String text) {
        JOptionPane.showMessageDialog(this, text);
    }

    private BufferedImage renderGraphPanel(graphPanel panel) {
        BufferedImage bi = getBufferedImage(panel);
        Graphics g = bi.getGraphics();
        h = panel.getHeight();
        w = panel.getWidth();
        double[][] speciesData = new double[numberSpecies + 1][species[0].size()];
        Integer[][] speciesDataI = new Integer[numberSpecies + 1][species[0].size()];
        for (int q = 0; q <= numberSpecies; q++) {
            try {
                speciesDataI[q] = (Integer[]) species[q].toArray(new Integer[species[q].size()]);
            } catch (Exception e) {
            }
        }
        Double[] tarray = (Double[]) temperature.toArray(new Double[temperature.size()]);
        double[] tdarray = new double[tarray.length];
        Double[] timearray = (Double[]) times.toArray(new Double[times.size()]);
        double[] timedarray = new double[timearray.length];
        Double[] darray = (Double[]) diversity.toArray(new Double[diversity.size()]);
        double[] diversitydarray = new double[darray.length];
        Integer[] totarray = (Integer[]) totalPopulation.toArray(new Integer[totalPopulation.size()]);
        double[] totdarray = new double[totarray.length];
        Double[] deatharray = (Double[]) aveDeath.toArray(new Double[aveDeath.size()]);
        double[] deathdarray = new double[deatharray.length];
        Double[] agearray = (Double[]) aveAge.toArray(new Double[aveAge.size()]);
        double[] agedarray = new double[agearray.length];
        double minTime = Double.MAX_VALUE;
        double maxTime = Double.MIN_VALUE;
        double minTemp = Double.MAX_VALUE;
        double maxTemp1 = Double.MIN_VALUE;
        double maxAge = Double.MIN_VALUE;
        try {
            for (int p = 0; p < timearray.length; p++) {
                for (int q = 0; q <= numberSpecies; q++) {
                    speciesData[q][p] = (double) speciesDataI[q][p].intValue();
                }
                tdarray[p] = tarray[p].doubleValue();
                timedarray[p] = timearray[p].doubleValue();
                diversitydarray[p] = darray[p].doubleValue();
                totdarray[p] = (double) totarray[p].intValue();
                deathdarray[p] = deatharray[p].doubleValue();
                agedarray[p] = agearray[p].doubleValue();
                //System.out.println("" + p + " Age is " + agedarray[p] + " with " + timearray.length + " total");
                if (minTime > timedarray[p]) {
                    minTime = timedarray[p];
                }
                if (maxTime < timedarray[p]) {
                    maxTime = timedarray[p];
                }
                if (minTemp > tdarray[p]) {
                    minTemp = tdarray[p];
                }
                if (maxTemp1 < tdarray[p]) {
                    maxTemp1 = tdarray[p];
                }
                if (maxAge < agedarray[p]) {
                    maxAge = agedarray[p];
                }
            }
        } catch (Exception e) {
        }
        if (graphType.getSelectedItem().toString().equals("Temperature")) {
            g = addGraphG(tdarray, timedarray, Color.black, Color.white, minTemp, maxTemp1, minTime, maxTime, g);
        } else if (graphType.getSelectedItem().toString().equals("Population Size")) {
            g = addGraphsG(numberSpecies + 1, speciesData, timedarray, speciesColors, Color.black, 0.0, (double) maxP, minTime, maxTime, g);
        } else if (graphType.getSelectedItem().toString().equals("Diversity")) {
            g = addGraphG(diversitydarray, timedarray, Color.black, Color.white, -0.1, -1 * Math.log(1 / (double) numberSpecies), minTime, maxTime, g);
        } else if (graphType.getSelectedItem().toString().equals("Total Population")) {
            g = addGraphG(totdarray, timedarray, Color.black, Color.white, 0, cells * cells, minTime, maxTime, g);
        } else if (graphType.getSelectedItem().toString().equals("Average Probability Death")) {
            g = addGraphG(deathdarray, timedarray, Color.black, Color.white, 0.0, 1.0, minTime, maxTime, g);
        } else if (graphType.getSelectedItem().toString().equals("Average Individual Age")) {
            g = addGraphG(agedarray, timedarray, Color.black, Color.white, 0.0, maxAge, minTime, maxTime, g);
        } else {
        }
        return bi;
    }

    public Graphics addGraphsG(int numberGraphs, double[][] data, double[] times, Color[] colors, Color init, double minY, double maxY, double minX, double maxX, Graphics g) {
        int[] curTimes = new int[times.length];
        Color initColor = init;
        g.setColor(initColor);
        g.fillRect(0, 0, w, h);
        for (int j = 0; j < numberGraphs; j++) {
            if (data[j].length != times.length) {
                return g;
            }
            Color curColor = colors[j];
            int[] curData = new int[data[j].length];
            for (int i = 0; i < times.length; i++) {
                curData[i] = h - (int) ((double) h * (data[j][i] - minY) / (maxY - minY));
                if (j == 0) {
                    curTimes[i] = (int) ((double) w * (times[i] - minX) / (maxX - minX));
                }
            }
            g.setColor(curColor);
            for (int i = 1; i < curTimes.length; i++) {
                g.drawLine(curTimes[i - 1], curData[i - 1], curTimes[i], curData[i]);
            }
        }
        return g;
    }

    public Graphics addGraphG(double[] data, double[] times, Color gColor, Color init, double minY, double maxY, double minX, double maxX, Graphics g) {
        Color curColor = gColor;
        Color initColor = init;
        g.setColor(initColor);
        g.fillRect(0, 0, w, h);
        if (data.length != times.length) {
            return g;
        }
        int[] curData = new int[data.length];
        int[] curTimes = new int[times.length];
        for (int i = 0; i < times.length; i++) {
            curData[i] = h - (int) ((double) h * (data[i] - minY) / (maxY - minY));
            curTimes[i] = (int) ((double) w * (times[i] - minX) / (maxX - minX));
        }
        g.setColor(curColor);
        for (int i = 1; i < curTimes.length; i++) {
            g.drawLine(curTimes[i - 1], curData[i - 1], curTimes[i], curData[i]);
        }
        return g;
    }

    private BufferedImage renderCAPanel(CAPanel panel) {
        BufferedImage bi = getBufferedImage(panel);
        Graphics g = bi.getGraphics();
        h = panel.getHeight();
        w = panel.getWidth();
        double wBox = (double) w / (double) panel.size;
        double hBox = (double) h / (double) panel.size;
        for (int i = 0; i < panel.size; i++) {
            for (int j = 0; j < panel.size; j++) {
                if (panel.statesCur[i][j] == 0) {
                    panel.statesCur[i][j] = 1;
                }

                if (panel.statesCur[i][j] == -1) {
                    g.setColor(Color.black);

                } else {
                    try {
                        String colCur = panel.curPalette[(int) (panel.curPalette.length * (double) panel.statesCur[i][j] / panel.nStates) - 1];
                        g.setColor(Color.decode(colCur));
                    } catch (Exception e) {
                        System.err.println("Couldn't set color ");
                        g.setColor(Color.black);
                    }
                }
                //determine pixel position of box upper corner
                int pixX = (int) ((i) * wBox);
                int pixY = h - (int) ((j) * hBox);
                //make a fillRect
                g.fillRect(pixX, pixY, (int) wBox + 1, (int) hBox + 1);
            }
        }
        return bi;
    }

    private void sPopulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sPopulationActionPerformed
        //save population panel
        BufferedImage bi;
        bi = renderCAPanel(populationPanel);
        saveImage(bi);
    }//GEN-LAST:event_sPopulationActionPerformed

    private void fileMenuMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileMenuMouseEntered
        if (rtask != null) {
            rtask.cancel(true);
        } else {
            System.out.println("rtask is null");
        }
    }//GEN-LAST:event_fileMenuMouseEntered

    private void editMenuMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editMenuMouseEntered
        if (rtask != null) {
            rtask.cancel(true);
        } else {
            System.out.println("rtask is null");
        }
    }//GEN-LAST:event_editMenuMouseEntered

    private void sTemperatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sTemperatureActionPerformed
        BufferedImage bi;
        bi = renderCAPanel(temperaturePanel);
        saveImage(bi);

    }//GEN-LAST:event_sTemperatureActionPerformed

    private void sGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sGraphActionPerformed
        BufferedImage bi;
        bi = renderGraphPanel(graphPanel);
        saveImage(bi);
        graphPanel.repaint();
    }//GEN-LAST:event_sGraphActionPerformed

    private void pRainbowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pRainbowActionPerformed
        populationPalette = 0;
        populationPanel.initPalette(populationPalette, true);
        populationPanel.paintComponent(populationPanel.getGraphics());
    }//GEN-LAST:event_pRainbowActionPerformed

    private void pHeatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pHeatActionPerformed
        populationPalette = 1;
        populationPanel.initPalette(populationPalette, true);
        populationPanel.paintComponent(populationPanel.getGraphics());
    }//GEN-LAST:event_pHeatActionPerformed

    private void pTopoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pTopoActionPerformed
        populationPalette = 2;
        populationPanel.initPalette(populationPalette, true);
        populationPanel.paintComponent(populationPanel.getGraphics());
    }//GEN-LAST:event_pTopoActionPerformed

    private void pCMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pCMActionPerformed
        populationPalette = 3;
        populationPanel.initPalette(populationPalette, true);
        populationPanel.paintComponent(populationPanel.getGraphics());
    }//GEN-LAST:event_pCMActionPerformed

    private void pTerrainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pTerrainActionPerformed
        populationPalette = 4;
        populationPanel.initPalette(populationPalette, true);
        populationPanel.paintComponent(populationPanel.getGraphics());
    }//GEN-LAST:event_pTerrainActionPerformed

    private void tRainbowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tRainbowActionPerformed
        temperaturePalette = 0;
        temperaturePanel.initPalette(temperaturePalette, false);
        temperaturePanel.paintComponent(temperaturePanel.getGraphics());
    }//GEN-LAST:event_tRainbowActionPerformed

    private void tHeatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tHeatActionPerformed
        temperaturePalette = 1;
        temperaturePanel.initPalette(temperaturePalette, false);
        temperaturePanel.paintComponent(temperaturePanel.getGraphics());
    }//GEN-LAST:event_tHeatActionPerformed

    private void tTopoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tTopoActionPerformed
        temperaturePalette = 2;
        temperaturePanel.initPalette(temperaturePalette, false);
        temperaturePanel.paintComponent(temperaturePanel.getGraphics());
    }//GEN-LAST:event_tTopoActionPerformed

    private void tCMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tCMActionPerformed
        temperaturePalette = 3;
        temperaturePanel.initPalette(temperaturePalette, false);
        temperaturePanel.paintComponent(temperaturePanel.getGraphics());
    }//GEN-LAST:event_tCMActionPerformed

    private void tTerrainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tTerrainActionPerformed
        temperaturePalette = 4;
        temperaturePanel.initPalette(temperaturePalette, false);
        temperaturePanel.paintComponent(temperaturePanel.getGraphics());
    }//GEN-LAST:event_tTerrainActionPerformed

    private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitMenuItemActionPerformed

    private void initializeMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initializeMenuActionPerformed
    }//GEN-LAST:event_initializeMenuActionPerformed

    private void initRandomDenseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initRandomDenseActionPerformed
        if (rtask != null) {
            rtask.cancel(true);
        } else {
        }
        initVariables();
        initVectors();
        initSpecies();
        initPopulation(INIT_DENSE);
        initTemperature();
        step = true;
        stepButton.setEnabled(true);
        rtask = new RunTask();
        rtask.execute();
    }//GEN-LAST:event_initRandomDenseActionPerformed

    private void initRandomSparseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initRandomSparseActionPerformed
        if (rtask != null) {
            rtask.cancel(true);
            rtask = null;
        } else {
        }
        initVariables();
        initVectors();
        initSpecies();
        initPopulation(INIT_SPARSE);
        initTemperature();
        step = true;
        stepButton.setEnabled(true);
        rtask = new RunTask();
        rtask.execute();
    }//GEN-LAST:event_initRandomSparseActionPerformed

    private void initSingleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initSingleActionPerformed
        if (rtask != null) {
            rtask.cancel(true);
            rtask = null;
        } else {
        }
        initVariables();
        initVectors();
        initSpecies();
        initPopulation(INIT_SINGLE);
        initTemperature();
        step = true;
        stepButton.setEnabled(true);
        rtask = new RunTask();
        rtask.execute();
    }//GEN-LAST:event_initSingleActionPerformed

    private void runMenuMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_runMenuMouseEntered
        if (rtask != null) {
            rtask.cancel(true);
        } else {
            System.out.println("rtask is null");
        }
    }//GEN-LAST:event_runMenuMouseEntered

    private void graphTypeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_graphTypeFocusGained
        int h = this.getHeight();
        int w = this.getWidth();

        if (h > 700) {
            curGraph = (String) graphType.getSelectedItem();
            graphPanel.needsInitialization = true;
            if (rtask != null) {
                rtask.cancel(true);
            } else {
                System.out.println("rtask is null");
            }
        }

    }//GEN-LAST:event_graphTypeFocusGained

    private void stepButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepButtonActionPerformed
        step = true;
    }//GEN-LAST:event_stepButtonActionPerformed

    public boolean saveImage(BufferedImage bi) {
        try {
            JFileChooser fc = new JFileChooser();
            int returnVal = fc.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File wfile = fc.getSelectedFile();
                String path = wfile.getPath();
                if (!Utils.getExtension(wfile).equals("gif")) {
                    path += ".gif";
                }
                renderBufferedImage(bi, "gif", path);
            }
        } catch (Exception e) {
            return false;
        }
        return true;

    }

    public BufferedImage getBufferedImage(JPanel display) {
        try {
            GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
            GraphicsDevice gs = ge.getDefaultScreenDevice();
            GraphicsConfiguration gc = gs.getDefaultConfiguration();
            // Create an image that supports transparent pixels
            BufferedImage bi = gc.createCompatibleImage(display.getWidth(), display.getHeight(), Transparency.OPAQUE);
            if (bi == null) {
                return null;
            }
            return bi;
        } catch (Exception e) {
        }
        return null;
    }

    public boolean renderBufferedImage(BufferedImage bi, String format, String outFileName) {
        try {
            Iterator writers = ImageIO.getImageWritersByFormatName(format);
            if (!writers.hasNext()) {
                //System.out.println("There were no image writers associated with the format " + format);
                String[] formats = ImageIO.getWriterFormatNames();
                //for(int i=0; i<formats.length; i++)
                //System.out.println(formats[i]);
            }
            ImageWriter writer = (ImageWriter) writers.next();
            File f1 = new File(outFileName);
            ImageOutputStream ios = ImageIO.createImageOutputStream(f1);
            writer.setOutput(ios);
            writer.write(bi);
            ios.close();
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    private void initSpecies() {
        System.out.println("There are " + numberSpecies + " species");
        species = new Vector[numberSpecies + 1];
        speciesCnt = new int[numberSpecies + 1];
        speciesColors = new Color[numberSpecies + 1];
        for (int i = 0; i <= numberSpecies; i++) {
            species[i] = new Vector();
            speciesCnt[i] = 0;
            if (i < numberSpecies) {
                speciesColors[i] = Color.decode(populationPanel.curPalette[(int) (populationPanel.curPalette.length * (double) (i + 1) / numberSpecies) - 1]);
            } else {
                speciesColors[i] = Color.black;
            }
        }
    }

    private void initPopulation(int type) {
        populationPanel.initPalette(populationPalette, true);
        populationStates = new int[cells][cells];
        age = new int[cells][cells];
        for (int i = 0; i < cells; i++) {
            for (int j = 0; j < cells; j++) {
                populationStates[i][j] = -1;
                age[i][j] = 0;
            }
        }
        if (type == INIT_DENSE) {
            for (int i = 0; i < cells; i++) {
                for (int j = 0; j < cells; j++) {
                    populationStates[i][j] = (int) (r.nextDouble() * numberSpecies) + 1;
                    age[i][j] = 1;
                }
            }
        } else if (type == INIT_SPARSE) {
            int nFill = (int) (sparsity * cells * cells);
            for (int i = 0; i < nFill; i++) {
                int x = (int) (r.nextDouble() * cells);
                int y = (int) (r.nextDouble() * cells);
                populationStates[x][y] = (int) (r.nextDouble() * numberSpecies) + 1;
                age[x][y] = 1;
            }
        } else if (type == INIT_SINGLE) {
            int x = (int) (r.nextDouble() * cells);
            int y = (int) (r.nextDouble() * cells);
            populationStates[x][y] = (int) (r.nextDouble() * numberSpecies) + 1;
            age[x][y] = 1;
        }
        populationPanel.needsInitialization = true;
        populationPanel.nStates = numberSpecies;
        populationPanel.setStates(populationStates, cells);
        populationPanel.size = cells;
        populationPanel.initPalette(populationPalette, true);
    }

    private void initPopulation() {
        populationPanel.initPalette(populationPalette, true);
        populationStates = new int[cells][cells];
        age = new int[cells][cells];
        for (int i = 0; i < cells; i++) {
            for (int j = 0; j < cells; j++) {
                populationStates[i][j] = (int) (r.nextDouble() * numberSpecies) + 1;
                age[i][j] = 1;
            }
        }
        populationPanel.needsInitialization = true;
        populationPanel.nStates = numberSpecies;
        populationPanel.setStates(populationStates, cells);
        populationPanel.size = cells;
        populationPanel.initPalette(populationPalette, true);
    }

    private void initTemperature() {
        temperaturePanel.paletteNo = temperaturePalette;
        temperatureStates = new double[cells][cells];
        temperatureColors = new int[cells][cells];
        for (int i = 0; i < cells; i++) {
            for (int j = 0; j < cells; j++) {
                temperatureStates[i][j] = doptimalTemp;
                temperatureColors[i][j] = (int) (temperaturePanel.palettes[temperaturePalette].length * temperatureStates[i][j] / maxTemp);
                if (temperatureColors[i][j] <= 0) {
                    temperatureColors[i][j] = 1;
                } else if (temperatureColors[i][j] >= temperaturePanel.palettes[temperaturePalette].length - 1) {
                    temperatureColors[i][j] = temperaturePanel.palettes[temperaturePalette].length - 1;
                }
            }
        }
        temperaturePanel.needsInitialization = true;
        temperaturePanel.nStates = temperaturePanel.palettes[temperaturePalette].length;
        temperaturePanel.setStates(temperatureColors, cells);
        temperaturePanel.size = cells;
    }

    private void initDefaults() {
        dmutationRate = mutationRate;
        dintensity = intensity;
        dheatCapacity = heatCapacity;
        dreproduce = reproduce;
        daveT = aveT;
        doptimalTemp = aveT;
        dcells = cells;
        dmaxTemp = maxTemp;
        ddeathRate = deathRate;
        dnumberSpecies = numberSpecies;
    }

    private void getVariableValues() {
        try {
            numberSpecies = Integer.parseInt(numberSpeciesText.getText());
            mutationRate = Double.parseDouble(mutationRateText.getText());
            intensity = Double.parseDouble(solarIntensityText.getText());
            heatCapacity = Double.parseDouble(heatCapacityText.getText());
            reproduce = Double.parseDouble(reproductionRateText.getText());
            deathRate = Double.parseDouble(deathRateText.getText());
            cells = Integer.parseInt(cellDimensionText.getText());
            maxTemp = intensity * doptimalTemp;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(dww, "Push New to reinitialize graphs");
        }
    }

    private void printVariableValues() {
        System.out.println("VARIABLE VALUES");
        System.out.println("death rate: " + deathRate);
        System.out.println("solar intensity: " + intensity);
        System.out.println("reproduction rate: " + reproduce);
        System.out.println("mutation rate: " + mutationRate);
        System.out.println("number species: " + numberSpecies);
        System.out.println("heat capacity: " + heatCapacity);
        System.out.println();
    }

    private void initVariables() {
        try {
            getVariableValues();
            step = false;
            numberSpeciesSlider.setValue(numberSpecies);
            mutationRateSlider.setValue((int) (mutationRate * 1000));
            solarIntensitySlider.setValue((int) (intensity * 100));
            heatCapacitySlider.setValue((int) (heatCapacity * 1000));
            reproductionRateSlider.setValue((int) (reproduce * 1000));
            deathRateSlider.setValue((int) (deathRate * 1000));
            aveT = Double.parseDouble(aveTText.getText());
            optimalTemp = doptimalTemp;
            time = 0;
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println("Could not initialize values");
            JOptionPane.showMessageDialog(dww, "Push New to reinitialize graphs");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new daisyWorldWindow().setVisible(true);
            }
        });
    }

    public void setDefaults() {
        try {
            mutationRateText.setText(Double.toString(dmutationRate));
            solarIntensityText.setText(Double.toString(dintensity));
            heatCapacityText.setText(Double.toString(dheatCapacity));
            reproductionRateText.setText(Double.toString(dreproduce));
            aveTText.setText(Double.toString(daveT));
            cellDimensionText.setText(Integer.toString(dcells));
            deathRateText.setText(Double.toString(ddeathRate));
            numberSpeciesText.setText(Integer.toString(dnumberSpecies));
            initVariables();
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println("Could not initialize values");
            JOptionPane.showMessageDialog(dww, "Push New to reinitialize graphs");
        }
    }

    /** Creates new form daisyWorldWindow */
    public daisyWorldWindow() {
        initComponents();
        initVariables();
        initVectors();
        initDefaults();
        initPopulation();
        initTemperature();
        dww = this;
    }

    private boolean winsCompetition(int state1, double temp1, int state2, double temp2) {
        if(state1==state2 && temp1==temp2)
        {
            return false;
        }
        if (state1 == -1) {
            return false;
        }
        if (state2 == -1) {
            return true;
        }
        double p1 = (1 - Math.exp(-1 * deathRate * Math.abs(optimalTemp - temp1))) + deathConstant;
        double p2 = (1 - Math.exp(-1 * deathRate * Math.abs(optimalTemp - temp2))) + deathConstant;
        if (p1 > p2) {
            return true;
        }
        return false;
    }

    private double calculateDiversity(int[] speciesCnt) {
        double tot = 0;
        double diversityS = 0;
        for (int i = 0; i < speciesCnt.length - 1; i++) {
            tot += (double) speciesCnt[i];
        }
        for (int i = 0; i < speciesCnt.length - 1; i++) {

            if (speciesCnt[i] > 0) {
                diversityS += -1 * Math.log(speciesCnt[i] / tot) * speciesCnt[i] / tot;
            }
        }
        return (diversityS);
    }

    private int calculateTotalPopulation(int[] speciesCnt) {
        int tot = 0;
        for (int i = 0; i < speciesCnt.length - 1; i++) //don't include dead things
        {
            tot += (int) speciesCnt[i];
        }
        return (tot);
    }

    class RunTask extends SwingWorker<Void, Void> {

        boolean isDone = false;
        boolean alerted = false;

        @Override
        public synchronized Void doInBackground() {

            try {
                maxP = 0;
                while (!isDone) {
                    if (step) {
                        Object[] options = {"Next...", "Continue...", "Stop..."};
                        int n = JOptionPane.showOptionDialog(dww, "Simulation:", "Step through...", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
                        if (n == 0) {
                        } else if (n == 1) {
                            step = false;
                        } else if (n == 2) {
                            step = false;
                            this.cancel(true);
                        }
                    }
                    time++;
                    aveT = 0;
                    aveP = 0;
                    aveA = 0;
                    speciesCnt = new int[numberSpecies + 1];
                    for (int x = 0; x < cells; x++) {
                        for (int y = 0; y < cells; y++) {
                            try {
                                if (populationStates[x][y] == -1) {
                                    for (int i = -1; i <= 1; i++) {
                                        for (int j = -1; j <= 1; j++) {
                                            int nx = i + x;
                                            int ny = j + y;
                                            if (nx < 0) {
                                                nx = cells - 1;
                                            }
                                            if (nx >= cells) {
                                                nx = 0;
                                            }
                                            if (ny < 0) {
                                                ny = cells - 1;
                                            }
                                            if (ny >= cells) {
                                                ny = 0;
                                            }
                                            temperatureStates[x][y] = temperatureStates[x][y] + heatDiffusion * (temperatureStates[nx][ny] - temperatureStates[x][y]);
                                        }
                                    }
                                    temperatureStates[x][y] = temperatureStates[x][y] + (heatCapacity * intensity * (maxTemp - temperatureStates[x][y]));
                                    temperatureColors[x][y] = (int) (temperaturePanel.palettes[temperaturePalette].length * temperatureStates[x][y] / maxTemp);
                                    if (temperatureColors[x][y] <= 0) {
                                        temperatureColors[x][y] = 1;
                                    } else if (temperatureColors[x][y] >= temperaturePanel.palettes[temperaturePalette].length - 1) {
                                        temperatureColors[x][y] = temperaturePanel.palettes[temperaturePalette].length - 1;
                                    }
                                } else if (age[x][y] > 0) {
                                    for (int i = -1; i <= 1; i++) {
                                        for (int j = -1; j <= 1; j++) {

                                            int nx = i + x;
                                            int ny = j + y;
                                            if (nx < 0) {
                                                nx = cells - 1;
                                            }
                                            if (nx >= cells) {
                                                nx = 0;
                                            }
                                            if (ny < 0) {
                                                ny = cells - 1;
                                            }
                                            if (ny >= cells) {
                                                ny = 0;
                                            }
//reproduce in empty cell (should never hit cell x,y as it is occupied)
                                            //if ((populationStates[nx][ny] == -1 && r.nextDouble() <= reproduce) || (populationStates[nx][ny]!=-1 && r.nextDouble() <= reproduce && r.nextDouble()<=0.5)) {
                                            if (populationStates[nx][ny] == -1 && r.nextDouble() <= reproduce) {
                                            //if (r.nextDouble() <= reproduce && winsCompetition(populationStates[x][y], maxTemp * (((double) (populationStates[x][y]) / (double) numberSpecies) - 1 / (2 * (double) numberSpecies)), populationStates[nx][ny], maxTemp * (((double) (populationStates[nx][ny]) / (double) numberSpecies) - 1 / (2 * (double) numberSpecies)))) {
                                                int state = populationStates[x][y];
                                                if (r.nextDouble() <= mutationRate && state != -1) {
                                                    double tr = r.nextDouble();
                                                    if (tr <= 0.5) {
                                                        if (state == numberSpecies) {
                                                            state = numberSpecies;
                                                        } else {
                                                            state++;
                                                        }
                                                    } else {
                                                        if (state == 1) {
                                                            state = 1;
                                                        } else {
                                                            state--;
                                                        }
                                                    }

                                                }
//adjust temperature in newly occupied cell
                                                populationStates[nx][ny] = state;
                                                age[nx][ny] = 0;
                                                double ratio = (double) (state) / (double) numberSpecies;
                                                double eqTemp = maxTemp * (ratio - 1 / (2 * (double) numberSpecies));


                                                if (state == -1) //will never happen
                                                {
                                                    eqTemp = maxTemp;
                                                }
                                                temperatureStates[nx][ny] = temperatureStates[nx][ny] + (heatCapacity * intensity * (eqTemp - temperatureStates[nx][ny]));
                                                temperatureColors[nx][ny] = (int) (temperaturePanel.palettes[temperaturePalette].length * temperatureStates[nx][ny] / maxTemp);
                                                if (temperatureColors[nx][ny] <= 0) {
                                                    temperatureColors[nx][ny] = 1;
                                                } else if (temperatureColors[nx][ny] >= temperaturePanel.palettes[temperaturePalette].length - 1) {
                                                    temperatureColors[nx][ny] = temperaturePanel.palettes[temperaturePalette].length - 1;
                                                }
                                                if (r.nextDouble() <= (1 - Math.exp(-1 * deathRate * Math.abs(optimalTemp - temperatureStates[nx][ny]))) + deathConstant) {
                                                    populationStates[nx][ny] = -1;
                                                    //age[nx][ny] = 0;
                                                }
                                            }
                                        }
                                    }
//adjust temperature in cell
                                    double ratio = (double) populationStates[x][y] / (double) numberSpecies;
                                    double eqTemp = maxTemp * (ratio - 1 / (2 * (double) numberSpecies));
                                    temperatureStates[x][y] = temperatureStates[x][y] + (int) (heatCapacity * (eqTemp - (double) temperatureStates[x][y]));
                                    temperatureColors[x][y] = (int) (temperaturePanel.palettes[temperaturePalette].length * temperatureStates[x][y] / maxTemp);
                                    if (temperatureColors[x][y] <= 0) {
                                        temperatureColors[x][y] = 1;
                                    } else if (temperatureColors[x][y] >= temperaturePanel.palettes[temperaturePalette].length - 1) {
                                        temperatureColors[x][y] = temperaturePanel.palettes[temperaturePalette].length - 1;
                                    }
//mutate cell
                                    if (r.nextDouble() <= mutationRate && populationStates[x][y] != -1) {
                                        double tr = r.nextDouble();
                                        if (tr <= 0.5) {
                                            if (populationStates[x][y] == numberSpecies) {
                                                populationStates[x][y] = numberSpecies;
                                            } else {
                                                populationStates[x][y]++;
                                            }
                                        } else {
                                            if (populationStates[x][y] == 1) {
                                                populationStates[x][y] = 1;
                                            } else {
                                                populationStates[x][y]--;
                                            }
                                        }
                                    }
                                    if (r.nextDouble() <= (1 - Math.exp(-1 * deathRate * Math.abs(optimalTemp - temperatureStates[x][y]))) + deathConstant) {
                                        populationStates[x][y] = -1;
                                        age[x][y] = 0;
                                    } else {
                                        age[x][y]++;
                                    }
                                } else {
                                    //adjust temperature in cell
                                    double ratio = (double) populationStates[x][y] / (double) numberSpecies;
                                    double eqTemp = maxTemp * (ratio - 1 / (2 * (double) numberSpecies));
                                    temperatureStates[x][y] = temperatureStates[x][y] + (int) (heatCapacity * (eqTemp - (double) temperatureStates[x][y]));
                                    temperatureColors[x][y] = (int) (temperaturePanel.palettes[temperaturePalette].length * temperatureStates[x][y] / maxTemp);
                                    if (temperatureColors[x][y] <= 0) {
                                        temperatureColors[x][y] = 1;
                                    } else if (temperatureColors[x][y] >= temperaturePanel.palettes[temperaturePalette].length - 1) {
                                        temperatureColors[x][y] = temperaturePanel.palettes[temperaturePalette].length - 1;
                                    }
//mutate cell
                                    if (r.nextDouble() <= mutationRate && populationStates[x][y] != -1) {
                                        double tr = r.nextDouble();
                                        if (tr <= 0.5) {
                                            if (populationStates[x][y] == numberSpecies) {
                                                populationStates[x][y] = numberSpecies;
                                            } else {
                                                populationStates[x][y]++;
                                            }
                                        } else {
                                            if (populationStates[x][y] == 1) {
                                                populationStates[x][y] = 1;
                                            } else {
                                                populationStates[x][y]--;
                                            }
                                        }
                                    }
                                    if (r.nextDouble() <= (1 - Math.exp(-1 * deathRate * Math.abs(optimalTemp - temperatureStates[x][y]))) + deathConstant) {
                                        populationStates[x][y] = -1;
                                        age[x][y] = 0;
                                    } else {
                                        age[x][y]++;
                                    }
                                }
                                if (time % interval == 0) {
                                    aveT += temperatureStates[x][y];
                                    if (populationStates[x][y] != -1) {
                                        aveA += age[x][y];
                                        aveP += (1 - Math.exp(-1 * deathRate * Math.abs(optimalTemp - temperatureStates[x][y]))) + deathConstant;
                                    }
                                    if (populationStates[x][y] == -1) {
                                        speciesCnt[numberSpecies]++;

                                    } else {

                                        speciesCnt[populationStates[x][y] - 1]++;
                                        if (speciesCnt[populationStates[x][y] - 1] > maxP) {
                                            maxP = speciesCnt[populationStates[x][y] - 1];
                                        }
                                    }

                                }
                            } catch (Exception e) {
                                if (!alerted) {
                                    JOptionPane.showMessageDialog(dww, "Push New to reinitialize graphs");
                                }
                                alerted = true;
                            }
                        }
                    }
                    if (time % interval == 0) {
//code here is terribly inefficient, but it will work
                        try {
                            int totPop = calculateTotalPopulation(speciesCnt);
                            totalTimeText.setText(Double.toString(time));
                            aveT /= cells * cells;
                            aveTText.setText(Double.toString(aveT));
                            temperature.add(aveT);
                            if (totPop > 0) {
                                aveP /= totPop;
                                aveA /= totPop;

                            } else {
                                aveP = 1.0;
                                aveA = 0.0;
                            }
                            aveDeath.add(aveP);
                            aveAge.add(aveA);
                            times.add(time);

                            for (int q = 0; q <= numberSpecies; q++) {
                                species[q].add(speciesCnt[q]);
                            }
                            diversity.add(calculateDiversity(speciesCnt));
                            totalPopulation.add(totPop);
                        } catch (Exception e) {
                            if (!alerted) {
                                JOptionPane.showMessageDialog(dww, "Push New to reinitialize graphs");
                            }
                            alerted = true;
                        }
                        double[][] speciesData = new double[numberSpecies + 1][species[0].size()];
                        Integer[][] speciesDataI = new Integer[numberSpecies + 1][species[0].size()];
                        for (int q = 0; q <= numberSpecies; q++) {
                            try {
                                speciesDataI[q] = (Integer[]) species[q].toArray(new Integer[species[q].size()]);
                            } catch (Exception e) {
                                if (!alerted) {
                                    JOptionPane.showMessageDialog(dww, "Push New to reinitialize graphs");
                                }
                                alerted = true;
                            }
                        }
                        Double[] tarray = (Double[]) temperature.toArray(new Double[temperature.size()]);
                        double[] tdarray = new double[tarray.length];
                        Double[] timearray = (Double[]) times.toArray(new Double[times.size()]);
                        double[] timedarray = new double[timearray.length];
                        Double[] darray = (Double[]) diversity.toArray(new Double[diversity.size()]);
                        double[] diversitydarray = new double[darray.length];
                        Integer[] totarray = (Integer[]) totalPopulation.toArray(new Integer[totalPopulation.size()]);
                        double[] totdarray = new double[totarray.length];
                        Double[] deatharray = (Double[]) aveDeath.toArray(new Double[aveDeath.size()]);
                        double[] deathdarray = new double[deatharray.length];
                        Double[] agearray = (Double[]) aveAge.toArray(new Double[aveAge.size()]);
                        double[] agedarray = new double[agearray.length];
                        double minTime = Double.MAX_VALUE;
                        double maxTime = Double.MIN_VALUE;
                        double minTemp = Double.MAX_VALUE;
                        double maxTemp = Double.MIN_VALUE;
                        double maxAge = Double.MIN_VALUE;
                        try {
                            for (int p = 0; p < timearray.length; p++) {

                                for (int q = 0; q <= numberSpecies; q++) {
                                    speciesData[q][p] = (double) speciesDataI[q][p].intValue();
                                }
                                tdarray[p] = tarray[p].doubleValue();
                                timedarray[p] = timearray[p].doubleValue();
                                diversitydarray[p] = darray[p].doubleValue();
                                totdarray[p] = (double) totarray[p].intValue();
                                deathdarray[p] = deatharray[p].doubleValue();
                                agedarray[p] = agearray[p].doubleValue();
                                if (minTime > timedarray[p]) {
                                    minTime = timedarray[p];
                                }
                                if (maxTime < timedarray[p]) {
                                    maxTime = timedarray[p];
                                }
                                if (minTemp > tdarray[p]) {
                                    minTemp = tdarray[p];
                                }
                                if (maxTemp < tdarray[p]) {
                                    maxTemp = tdarray[p];
                                }
                                if (maxAge < agedarray[p]) {
                                    maxAge = agedarray[p];
                                }
                            }
                        } catch (Exception e) {
                            if (!alerted) {
                                JOptionPane.showMessageDialog(dww, "Push New to reinitialize graphs");
                            }
                            alerted = true;
                        }
                        if (graphType.getSelectedItem().toString().equals("Temperature")) {
                            graphPanel.addGraph(tdarray, timedarray, Color.black, Color.white, minTemp, maxTemp, minTime, maxTime);
                        } else if (graphType.getSelectedItem().toString().equals("Population Size")) {
                            graphPanel.addGraphs(numberSpecies + 1, speciesData, timedarray, speciesColors, Color.black, 0, maxP, minTime, maxTime);
                        } else if (graphType.getSelectedItem().toString().equals("Diversity")) {
                            graphPanel.addGraph(diversitydarray, timedarray, Color.black, Color.white, -0.1, -1 * Math.log(1 / (double) numberSpecies), minTime, maxTime);
                        } else if (graphType.getSelectedItem().toString().equals("Total Population")) {
                            graphPanel.addGraph(totdarray, timedarray, Color.black, Color.white, 0, cells * cells, minTime, maxTime);
                        } else if (graphType.getSelectedItem().toString().equals("Average Probability Death")) {
                            graphPanel.addGraph(deathdarray, timedarray, Color.black, Color.white, 0.0, 1.0, minTime, maxTime);
                        } else if (graphType.getSelectedItem().toString().equals("Average Individual Age")) {
                            graphPanel.addGraph(agedarray, timedarray, Color.black, Color.white, 0.0, maxAge, minTime, maxTime);
                        } else {
                            graphPanel.setBlank(Color.black);
                        }
                    }
                    populationPanel.setStates(populationStates, cells, true);
                    temperaturePanel.setStates(temperatureColors, cells);

                }
                isDone = false;
            } catch (Exception ignore) {
                ignore.printStackTrace();
            }
            return null;
        }

        @Override
        public void done() {
            isDone = true;
            //Toolkit.getDefaultToolkit().beep();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aveTLabel;
    private javax.swing.JTextField aveTText;
    private javax.swing.JTextField cellDimensionText;
    private javax.swing.JLabel cellsLabel;
    private javax.swing.JLabel deathRateLabel;
    private javax.swing.JSlider deathRateSlider;
    private javax.swing.JTextField deathRateText;
    private javax.swing.JLabel displayGraphLabel;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private daisyWorld.graphPanel graphPanel;
    private javax.swing.JComboBox graphType;
    private javax.swing.JLabel heatCapacityLabel;
    private javax.swing.JSlider heatCapacitySlider;
    private javax.swing.JTextField heatCapacityText;
    private javax.swing.JRadioButtonMenuItem initRandomDense;
    private javax.swing.JRadioButtonMenuItem initRandomSparse;
    private javax.swing.JRadioButtonMenuItem initSingle;
    private javax.swing.ButtonGroup initializationChoices;
    private javax.swing.JMenu initializeMenu;
    private javax.swing.JLabel intensityLabel;
    private javax.swing.JMenuBar menu;
    private javax.swing.JLabel mutationRateLabel;
    private javax.swing.JSlider mutationRateSlider;
    private javax.swing.JTextField mutationRateText;
    private javax.swing.JButton newButton;
    private javax.swing.JLabel numberSpeciesLabel;
    private javax.swing.JSlider numberSpeciesSlider;
    private javax.swing.JTextField numberSpeciesText;
    private javax.swing.JMenuItem pCM;
    private javax.swing.JMenuItem pHeat;
    private javax.swing.JMenuItem pRainbow;
    private javax.swing.JMenuItem pTerrain;
    private javax.swing.JMenuItem pTopo;
    private javax.swing.JMenu populationPaletteMenu;
    private daisyWorld.CAPanel populationPanel;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JLabel reproductionRateLabel;
    private javax.swing.JSlider reproductionRateSlider;
    private javax.swing.JTextField reproductionRateText;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton runButton;
    private javax.swing.JMenu runMenu;
    private javax.swing.JMenuItem sGraph;
    private javax.swing.JMenuItem sPopulation;
    private javax.swing.JMenuItem sTemperature;
    private javax.swing.JMenu saveMenuItem;
    private javax.swing.JSlider solarIntensitySlider;
    private javax.swing.JTextField solarIntensityText;
    private javax.swing.JButton stepButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JMenuItem tCM;
    private javax.swing.JMenuItem tHeat;
    private javax.swing.JMenuItem tRainbow;
    private javax.swing.JMenuItem tTerrain;
    private javax.swing.JMenuItem tTopo;
    private javax.swing.JMenu temperaturePaletteMenu;
    private daisyWorld.CAPanel temperaturePanel;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JTextField totalTimeText;
    // End of variables declaration//GEN-END:variables
}

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * graphPanel.java
 *
 * Created on Nov 16, 2009, 11:18:16 PM
 */
package daisyWorld;

import java.awt.Color;
import java.awt.Graphics;

/**
 *
 * @author David
 */
public class graphPanel extends javax.swing.JPanel {

    int curTimes[] = new int[1];
    int curData[] = new int[1];
    boolean needsInitialization = true;
    boolean blank = true;
    Color curColor = Color.black;
    Color initColor = Color.white;

    /** Creates new form graphPanel */
    public graphPanel() {
        initComponents();
        curTimes[0] = 0;
        curData[0] = 0;
    }

    public boolean addGraphs(int numberGraphs, double[][] data, double[] times, Color[] colors, Color init, double minY, double maxY, double minX, double maxX) {
       //System.out.println("A with maxY = " + maxY);

        int h = this.getHeight();
        int w = this.getWidth();

        curTimes = new int[times.length];
        initColor = init;
        //System.out.println("A1 with number graphs = " + numberGraphs);
        for (int j = 0; j < numberGraphs; j++) {
            if (j == 0) {
                needsInitialization = true;
            } else {
                needsInitialization = false;
            }
            if (data[j].length != times.length) {
                return false;
            }
            curColor = colors[j];
            curData = new int[data[j].length];
//System.out.println("B");
            for (int i = 0; i < times.length; i++) {
                //if(data[j][i]>maxY) System.out.println("Data, " + data[j][i] + " greater than max " + maxY);
                curData[i] = h - (int) ((double) h * (data[j][i] - minY) / (maxY - minY));
                if (j == 0) {
                    curTimes[i] = (int) ((double) w * (times[i] - minX) / (maxX - minX));
                }
                //.out.println(" " + curData[i] + "," + curTimes[i]);
            }
//System.out.println("\tPainting graph " + j);
            this.paintComponent(this.getGraphics());
        }

        return true;
    }

    public boolean setBlank(Color init)
    {
        blank = true;
        this.paintComponent(this.getGraphics());
        return true;
    }

    public boolean addGraph(double[] data, double[] times, Color gColor, Color init, double minY, double maxY, double minX, double maxX) {
        needsInitialization=true;
        int h = this.getHeight();
        int w = this.getWidth();
        if (data.length != times.length) {
            return false;
        }
        curColor = gColor;
        initColor = init;
        curData = new int[data.length];
        curTimes = new int[times.length];
        for (int i = 0; i < times.length; i++) {
            curData[i] = h - (int) ((double) h * (data[i] - minY) / (maxY - minY));
            curTimes[i] = (int) ((double) w * (times[i] - minX) / (maxX - minX));
            //.out.println(" " + curData[i] + "," + curTimes[i]);
        }
        this.paintComponent(this.getGraphics());

        return true;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    protected void paintComponent(Graphics g) {
        // Let UI delegate paint first
        // (including background filling, if I'm opaque)
        //super.paintComponent(g);

        //System.out.println("The border is " + border);

        if(blank)
        {
            int h = this.getHeight();
            int w = this.getWidth();
            g.setColor(initColor);
            g.fillRect(0, 0, w, h);
            blank = false;
            return;
        }

        if (needsInitialization) {
            int h = this.getHeight();
            int w = this.getWidth();
            g.setColor(initColor);
            g.fillRect(0, 0, w, h);
            needsInitialization = false;
        }
        g.setColor(curColor);
        for (int i = 1; i < curTimes.length; i++) {
            g.drawLine(curTimes[i - 1], curData[i - 1], curTimes[i], curData[i]);
        }

    }

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new graphPanel().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
